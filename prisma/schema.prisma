generator client {
  provider = "prisma-client-js"
  output   = "../src/app/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id // From Cognito

  email     String @unique
  firstName String
  lastName  String

  onboarding Onboarding?

  subscriptions UserSubscription[]

  profilePictureUrl String? // From S3

  friendshipsAsUser1 Friendship[] @relation("User1")
  friendshipsAsUser2 Friendship[] @relation("User2")

  generatedPhotos GeneratedPhoto[]
  appearances     GeneratedPhotoAppearances[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Friendship {
  user1Id String
  user2Id String

  user1 User @relation("User1", fields: [user1Id], references: [id])
  user2 User @relation("User2", fields: [user2Id], references: [id])

  confirmed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([user1Id, user2Id]) // Sort before inserting
}

model GeneratedPhoto {
  id BigInt @id @default(autoincrement())

  url String @unique // From S3

  createdByUserId String
  createdByUser   User   @relation(fields: [createdByUserId], references: [id])

  appearingUsers GeneratedPhotoAppearances[]

  confirmed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GeneratedPhotoAppearances {
  generatedPhotoId BigInt
  userId           String

  generatedPhoto GeneratedPhoto @relation(fields: [generatedPhotoId], references: [id])
  user           User           @relation(fields: [userId], references: [id])

  approved Boolean @default(false)

  @@id([generatedPhotoId, userId]) // composite primary key
}

model Subscription {
  id BigInt @id @default(autoincrement())

  tier  SubscriptionTier
  users UserSubscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SubscriptionTier {
  FREE
  PLUS
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
}

model UserSubscription {
  userId         String
  subscriptionId BigInt

  startDate   DateTime
  endDate     DateTime?
  cancelledAt DateTime?

  status SubscriptionStatus

  user         User         @relation(fields: [userId], references: [id])
  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, subscriptionId, status]) // composite primary key
}

model Onboarding {
  id BigInt @id @default(autoincrement())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  steps OnboardingStepInstance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OnboardingStepName {
  UPLOAD_PROFILE_PICTURE
  CHOOSE_PLAN
  ADD_FRIENDS
  GENERATE_FIRST_PHOTO
}

model OnboardingStep {
  id          BigInt             @id @default(autoincrement())
  name        OnboardingStepName
  description String?

  required Boolean @default(true)

  instances OnboardingStepInstance[]
}

model OnboardingStepInstance {
  name OnboardingStepName

  onboardingId BigInt
  onboarding   Onboarding @relation(fields: [onboardingId], references: [id])

  stepId BigInt
  step   OnboardingStep @relation(fields: [stepId], references: [id])

  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([onboardingId, name]) // composite primary key
}
